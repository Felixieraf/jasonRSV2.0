/*
   Project jasonRestIot

   Gradle build file for Jason Application
   July 20, 2024 - 14:45:03
*/

defaultTasks 'runAll'

apply plugin: 'java'

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://jade.tilab.com/maven/" }
    maven { url "https://repo1.maven.org/maven2/" }
}

dependencies {
    implementation 'io.github.jason-lang:jason:3.2.0'
    implementation 'org.jdeferred:jdeferred-core:1.2.4'
    implementation 'org.json:json:20180813'
    implementation 'org.glassfish.jersey.core:jersey-server:2.35'
    implementation 'org.glassfish.grizzly:grizzly-http-server:2.4.4'
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.35'
    implementation 'com.corundumstudio.socketio:netty-socketio:1.7.19'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    implementation 'io.socket:socket.io-client:1.0.0'
    implementation 'org.springframework:spring-web:5.3.24'
    implementation 'org.springframework.boot:spring-boot-starter'

    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.34'
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.10'
    implementation 'io.swagger.core.v3:swagger-jaxrs2:2.1.10'
    implementation 'org.webjars:swagger-ui:4.1.0'


    // To use locally installed jars:
    implementation fileTree(dir: 'lib', include: '*.jar')
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
            srcDir 'src/env'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run(type: JavaExec, dependsOn: 'classes') {
    description 'Runs the application'
    mainClass = 'jason.infra.local.RunLocalMAS'
    args = ['jasonRestIot.mas2j']
    classpath sourceSets.main.runtimeClasspath
}

task runJade(type: JavaExec, dependsOn: 'classes') {
    description 'Runs the application with Jade infrastructure'
    mainClass = 'jason.infra.jade.RunJadeMAS'
    args = ['jasonRestIot.mas2j']
    classpath sourceSets.main.runtimeClasspath
}

task runJasonServer(type: JavaExec, dependsOn: 'classes') {
    description 'Runs the Jason server'
    mainClass = 'jasonrs.configuration.StartJasonRsServer'
    classpath sourceSets.main.runtimeClasspath
}

task runAll {
    description 'Runs all servers in parallel'
    dependsOn 'build'
    doLast {
        // Start MAS (mas2j) in a separate thread
        Thread masThread = new Thread({
            runJade.exec()
        })
        masThread.start()

        // Start Jason server (StartJasonRsServer)
        runJasonServer.exec()

        // Wait for MAS to finish
        masThread.join()
    }
}
